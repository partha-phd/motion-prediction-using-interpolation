%%% TWO TRACK MODEL OF THE VEHICLE %%%
classdef Vehicle < handle
    properties
        type;
        speed;
        lateralAccn;
        longitudinalAccn;
        vehicleMass;
        heightCG;
        lengthVehicle;
        widthVehicle;
        lf;
        lr;
        lfToFront;
        lrToRear;
        steeringRatio;
        steeringAngle;
        angleDir; %yaw angle
        handle; %vehicle object (patch) handle
        steeringAngleDriver;
        maxMinSlip       
        %For collision detection
        xCoordinates;
        yCoordinates;
        %Tyre Properties
        cl_fl;
        bl_fl;
        cs_fl;
        bs_fl;
        cl_fr;
        bl_fr;
        cs_fr;
        bs_fr;
        cl_rl;
        bl_rl;
        cs_rl;
        bs_rl;
        cl_rr;
        bl_rr;
        cs_rr;
        bs_rr;
        Iz;
        xCG;
        yCG;
        radiusCollisionControl;
        psiRel; 
        ePsi; 
        
        %% Two track model variables
        slipLongitudinal_fl;
        slipLongitudinal_fr;
        slipLongitudinal_rl;
        slipLongitudinal_rr;
        
        delta_fl;
        delta_fr;
        delta_rl;
        delta_rr;
        
        % Forces on tyre in Z direction
        Fz_fl;
        Fz_fr;
        Fz_rl;
        Fz_rr;
        
        % longitudinal forces on tyre
        Fl_fl;
        Fl_fr;
        Fl_rl;
        Fl_rr;
        
        % slip angle
        alpha_fl;
        alpha_fr;
        alpha_rl;
        alpha_rr;
        
        %Sideslip
        slipSide_fl;
        slipSide_fr;
        slipSide_rl;
        slipSide_rr;
        
        %Lateral forces on tyre
        Fs_fl;
        Fs_fr;
        Fs_rl;
        Fs_rr;
        
        %sideslip angle
        beta;
        dotPhi;
        
        %information regarding the path to be travelled by vehicle
        trackHandles;
        xTravelPoints=[];
        yTravelPoints=[];
        
        %Points to be considered for stopping the vehicle (longitudinal
        %controller)
        xTrafficSignalPoints;
        yTrafficSignalPoints;
        trafficSignalHandles;
        xOtherVehiclePoints;
        yOtherVehiclePoints;
        
        %driver model
        signalLongiController=1;
        otherObjLongiController=1;
        
        % probability for hypotheseses
        minProb;

        % vehicle ID
        vehicleID;
    end
    
    methods
        function obj= Vehicle()
            obj.type = 'Car';
            obj.speed=50/3.6;
            obj.lateralAccn=0;
            obj.longitudinalAccn=0;
            obj.vehicleMass=1450;
            obj.heightCG=500;
            obj.lengthVehicle=2800;
            obj.widthVehicle=1600;
            obj.lf=1000;
            obj.lr=1000;
            obj.lfToFront=700;
            obj.lrToRear=700;
            obj.steeringRatio=13.5;
            obj.angleDir=0;
            obj.cl_fl=1.4;
            obj.bl_fl=13;
            obj.cs_fl=1.25;
            obj.bs_fl=17.2;
            obj.cl_fr=1.4;
            obj.bl_fr=13;
            obj.cs_fr=1.25;
            obj.bs_fr=17.2;
            obj.cl_rl=1.4;
            obj.bl_rl=13;
            obj.cs_rl=1.25;
            obj.bs_rl=17.2;
            obj.cl_rr=1.4;
            obj.bl_rr=13;
            obj.cs_rr=1.25;
            obj.bs_rr=17.2;
            obj.steeringAngle = 0;
            obj.steeringAngleDriver = 0;
            obj.Iz = 1920;
            obj.maxMinSlip = 0;
            
            %% two track model variables
            obj.slipLongitudinal_fl=0;
            obj.slipLongitudinal_fr=0;
            obj.slipLongitudinal_rl=0;
            obj.slipLongitudinal_rr=0;
            
            obj.delta_fl=0;
            obj.delta_fr=0;
            obj.delta_rl=0;
            obj.delta_rr=0;
            
            % Forces on tyre in Z direction
            obj.Fz_fl=0;
            obj.Fz_fr=0;
            obj.Fz_rl=0;
            obj.Fz_rr=0;
            
            % longitudinal forces on tyre
            obj.Fl_fl=0;
            obj.Fl_fr=0;
            obj.Fl_rl=0;
            obj.Fl_rr=0;
            
            %
            obj.alpha_fl=0;
            obj.alpha_fr=0;
            obj.alpha_rl=0;
            obj.alpha_rr=0;
            
            %Sideslip
            obj.slipSide_fl=0;
            obj.slipSide_fr=0;
            obj.slipSide_rl=0;
            obj.slipSide_rr=0;
            
            %Lateral forces on tyre
            obj.Fs_fl=0;
            obj.Fs_fr=0;
            obj.Fs_rl=0;
            obj.Fs_rr=0;
            
            obj.beta = 0;
            obj.dotPhi=0;
            
        end
        
        function drive(obj,xInitial,yInitial,psiInitial,vInitial,...
                axInitial, ayInitial, xPoints, yPoints, desiredSlip, T,...
                currentStep, vehType, vehLength, vehWidth)

            obj.xCG(1)=xInitial;
            obj.yCG(1)=yInitial;
            obj.speed(1)=vInitial;
            obj.angleDir(1)=psiInitial;
            obj.longitudinalAccn(1)=axInitial;
            obj.lateralAccn(1)=ayInitial;
            g=9.81;     % accn due to gravity
            
            factorMu=1; % 0.6; %Friction coefficients
            mul_f=factorMu*1.0;
            mul_r=factorMu*1.0;
            mus_f=factorMu*0.9;
            mus_r=factorMu*0.9;
            
            mul_fl=mul_f;
            mus_fl=mus_f;
            mul_fr=mul_f;
            mus_fr=mus_f;
            mul_rl=mul_r;
            mus_rl=mus_r;
            mul_rr=mul_r;
            mus_rr=mus_r;
            
            ell=(obj.lf+obj.lr);
            size_xPoints = size(xPoints);
            
            %PID gains
            Kang=180/pi*max(2.5, (6-8)/(80-50)*obj.speed(currentStep-1)*...
                3.6+8-(6-8)/(80-50)*50);
            Kdist=180/pi*max(0.1, (0.1-0.8)/(100-70)*...
                obj.speed(currentStep-1)*3.6+0.8-(0.1-0.8)/(100-70)*70);
            
            %Anticipation time
            if obj.speed(currentStep-1) < 15/3.6
                anticipationTime =1;
            elseif obj.speed(currentStep-1) < 50/3.6
                anticipationTime=(0.5-1)/(50-15)*...
                    obj.speed(currentStep-1)*3.6+1-(0.5-1)/(50-15)*15;
            else
                anticipationTime=0.1;
            end
            
            anticipationDistance =  obj.speed(currentStep-1)*...
                anticipationTime;
            idxAnticipation =floor(anticipationDistance/0.3);
            
            
            % find CGPoint index of vehicle and goal index
            dist=(((xPoints - obj.xCG(currentStep-1)).^2)+...
                (yPoints - obj.yCG(currentStep-1)).^2);
            [~,CGPoint]=min(dist);
            
            if (CGPoint + idxAnticipation) < size_xPoints(2)
                x2 = xPoints(CGPoint+idxAnticipation);
                y2 = yPoints(CGPoint+idxAnticipation);
                try
                x1= (xPoints(CGPoint+idxAnticipation-2));
                y1= (yPoints(CGPoint+idxAnticipation-2));
                catch
                    x1= (xPoints(CGPoint+idxAnticipation));
                    y1= (yPoints(CGPoint+idxAnticipation));
                end
            else
                x2 = xPoints(CGPoint); 
                x1= (xPoints(CGPoint-2));
                y2 = yPoints(CGPoint); 
                y1= (yPoints(CGPoint-2));
            end
            if x2 > x1 + 1e-9
                aLin=-(y2-y1)/(x2-x1); bLin=1; 
                cLin=((y2-y1)/(x2-x1))*x1-y1;
                distToLin=([aLin bLin cLin]*[obj.xCG(currentStep - 1);
                    obj.yCG(currentStep - 1); 1])/sqrt(aLin^2+bLin^2);
                obj.psiRel(currentStep)=atan2(-aLin, bLin);
            elseif x1 > x2 + 1e-9
                aLin=-(y2-y1)/(x2-x1); bLin=1; 
                cLin=((y2-y1)/(x2-x1))*x1-y1;
                distToLin=-([aLin bLin cLin]*[obj.xCG(currentStep - 1); 
                    obj.yCG(currentStep - 1); 1])/sqrt(aLin^2+bLin^2);
                obj.psiRel(currentStep)=atan2(aLin, -bLin);
            else
                if y2-y1>0
                    distToLin=x2-obj.xCG(currentStep - 1);
                    obj.psiRel(currentStep)=pi/2;
                else
                    distToLin=obj.xCG(currentStep - 1)-x2;
                    obj.psiRel(currentStep)=-pi/2;
                end
            end
            
            % error calculation
             obj.ePsi(currentStep) = obj.psiRel(currentStep) -...
                obj.angleDir(currentStep-1);
            if obj.ePsi(currentStep)>pi
                obj.ePsi(currentStep)=obj.ePsi(currentStep)-2*pi;
            elseif obj.ePsi(currentStep)<-pi
                obj.ePsi(currentStep)=obj.ePsi(currentStep)+2*pi;
            end
            
            %Integral error
            size_error = size(obj.ePsi);
            integral_error = 0;
            for i=1:size_error(2)
                integral_error = integral_error + obj.ePsi(i)*T;
            end
            
            maxSteervelocity=500;
            obj.steeringAngleDriver(currentStep) = (Kang*obj.ePsi(currentStep)-Kdist*distToLin);
            if abs( obj.steeringAngleDriver(currentStep) -  obj.steeringAngleDriver(currentStep-1))/T >  maxSteervelocity
                obj.steeringAngleDriver(currentStep) = obj.steeringAngleDriver(currentStep-1) + ...
                    sign(obj.steeringAngleDriver(currentStep) -  obj.steeringAngleDriver(currentStep-1))*maxSteervelocity*T;
            end
            
            if obj.steeringAngleDriver(currentStep) > 720
                obj.steeringAngleDriver(currentStep)=720;
            elseif obj.steeringAngleDriver(currentStep) < -720
                obj.steeringAngleDriver(currentStep)=-720;
            end
            
            
            % Longitudinal
            ka=0.3;
            ev=desiredSlip - obj.maxMinSlip(currentStep-1);
            
            obj.maxMinSlip(currentStep)=ka*ev;
            
            obj.slipLongitudinal_fl(currentStep)=...
                obj.maxMinSlip(currentStep); %here: negative for braking
            obj.slipLongitudinal_fr(currentStep)=...
                obj.maxMinSlip(currentStep); %here: negative for braking
            obj.slipLongitudinal_rl(currentStep)=...
                obj.maxMinSlip(currentStep); %here: negative for braking
            obj.slipLongitudinal_rr(currentStep)=...
                obj.maxMinSlip(currentStep); %here: negative for braking
            
            obj.delta_fl(currentStep)=...
                (obj.steeringAngleDriver(currentStep)/obj.steeringRatio)...
                *pi/180;
            obj.delta_fr(currentStep)=...
                (obj.steeringAngleDriver(currentStep)/obj.steeringRatio)...
                *pi/180;
            obj.delta_rl(currentStep)=0;
            obj.delta_rr(currentStep)=0;
            
            % VEHICLE DYNAMICS MODEL
            
            if currentStep<=2
                obj.longitudinalAccn(currentStep) =obj.longitudinalAccn(1);
                obj.lateralAccn(currentStep)=obj.lateralAccn(1);
            else
                obj.longitudinalAccn(currentStep) =...
                    ((obj.speed(currentStep-1)-obj.speed(currentStep-2))...
                    /T)*cos(obj.beta(currentStep-1))-...
                    obj.speed(currentStep-1)*(((obj.beta(currentStep-1)...
                    -obj.beta(currentStep-2))/T+...
                    obj.dotPhi(currentStep-1)))*...
                    sin(obj.beta(currentStep-1));
                obj.lateralAccn(currentStep)=((obj.speed(currentStep-1)...
                    -obj.speed(currentStep-2))/T)*...
                    sin(obj.beta(currentStep-1))+...
                    obj.speed(currentStep-1)*(((obj.beta(currentStep-1)...
                    -obj.beta(currentStep-2))/T)+...
                    obj.dotPhi(currentStep-1))*...
                    cos(obj.beta(currentStep-1));
            end
            
            obj.Fz_fl(currentStep)=obj.vehicleMass*...
                (obj.lr/ell-obj.heightCG/ell*...
                obj.longitudinalAccn(currentStep)/g)*...
                (g/2-obj.heightCG/obj.widthVehicle*...
                obj.lateralAccn(currentStep));      
            obj.Fz_fr(currentStep)=obj.vehicleMass*...
                (obj.lr/ell-obj.heightCG/ell*...
                obj.longitudinalAccn(currentStep)/g)*...
                (g/2+obj.heightCG/obj.widthVehicle*...
                obj.lateralAccn(currentStep));      
            obj.Fz_rl(currentStep)=obj.vehicleMass*...
                (obj.lf/ell+obj.heightCG/ell*...
                obj.longitudinalAccn(currentStep)/g)*...
                (g/2-obj.heightCG/obj.widthVehicle*...
                obj.lateralAccn(currentStep));      
            obj.Fz_rr(currentStep)=obj.vehicleMass*...
                (obj.lf/ell+obj.heightCG/ell*...
                obj.longitudinalAccn(currentStep)/g)*...
                (g/2+obj.heightCG/obj.widthVehicle*...
                obj.lateralAccn(currentStep));     
            
            %Forces on front-left tire
            obj.Fl_fl(currentStep)=obj.Fz_fl(currentStep)*mul_fl*...
                sin(obj.cl_fl*atan2(obj.bl_fl*...
                obj.slipLongitudinal_fl(currentStep-1), mul_fl));
            obj.alpha_fl(currentStep)=obj.delta_fl(currentStep)-...
                atan2((obj.speed(currentStep-1)*...
                sin(obj.beta(currentStep-1))+...
                (obj.lf/1000)*obj.dotPhi(currentStep-1)),...
                (obj.speed(currentStep-1)*cos(obj.beta(currentStep-1))-...
                obj.widthVehicle/2000*obj.dotPhi(currentStep-1)));
            obj.slipSide_fl(currentStep)=tan(obj.alpha_fl(currentStep));
            
            obj.Fs_fl(currentStep)=obj.Fz_fl(currentStep)*mus_fl*...
                sin(obj.cs_fl*atan2(obj.bs_fl*...
                obj.slipSide_fl(currentStep), mus_fl));
            forceDirection_fl=atan2(obj.slipSide_fl(currentStep),...
                obj.slipLongitudinal_fl(currentStep));
            absolutSlip_fl=sqrt(obj.slipLongitudinal_fl(currentStep)^2+...
                obj.slipSide_fl(currentStep)^2);
            if absolutSlip_fl<1e-3
                absoluteForce_fl=0;
            else
                absoluteForce_fl =sqrt...
                    ((obj.slipLongitudinal_fl(currentStep)/...
                    absolutSlip_fl)^2*obj.Fl_fl(currentStep)^2+...
                    (obj.slipSide_fl(currentStep)/absolutSlip_fl)^2*...
                    obj.Fs_fl(currentStep)^2);
            end
            obj.Fl_fl(currentStep)= absoluteForce_fl*...
                cos(forceDirection_fl);
            obj.Fs_fl(currentStep)= absoluteForce_fl*...
                sin(forceDirection_fl);
            
            %Forces on front-right tire
            obj.Fl_fr(currentStep)=obj.Fz_fr(currentStep)*mul_fr*...
                sin(obj.cl_fr*atan2(obj.bl_fr*...
                obj.slipLongitudinal_fr(currentStep), mul_fr)); 
            obj.alpha_fr(currentStep)=obj.delta_fr(currentStep)-...
                atan2((obj.speed(currentStep-1)*...
                sin(obj.beta(currentStep-1))+...
                obj.lf/1000*obj.dotPhi(currentStep-1)),...
                (obj.speed(currentStep-1)*cos(obj.beta(currentStep-1))+...
                obj.widthVehicle/2000*obj.dotPhi(currentStep-1)));
            obj.slipSide_fr(currentStep)=tan(obj.alpha_fr(currentStep));
            obj.Fs_fr(currentStep)=obj.Fz_fr(currentStep)*mus_fr*...
                sin(obj.cs_fr*atan2(obj.bs_fr*...
                obj.slipSide_fr(currentStep), mus_fr));  
            forceDirection_fr=atan2(obj.slipSide_fr(currentStep),...
                obj.slipLongitudinal_fr(currentStep));
            absolutSlip_fr=sqrt(obj.slipLongitudinal_fr(currentStep)^2+...
                obj.slipSide_fr(currentStep)^2);
            if absolutSlip_fr<1e-3
                absoluteForce_fr=0;
            else
                absoluteForce_fr=sqrt...
                    ((obj.slipLongitudinal_fr(currentStep)/...
                    absolutSlip_fr)^2*obj.Fl_fr(currentStep)^2+...
                    (obj.slipSide_fr(currentStep)/absolutSlip_fr)^2*...
                    obj.Fs_fr(currentStep)^2);
            end
            obj.Fl_fr(currentStep)=absoluteForce_fr*cos(forceDirection_fr);
            obj.Fs_fr(currentStep)=absoluteForce_fr*sin(forceDirection_fr);
            
            %Forces on rear-left tire
            obj.Fl_rl(currentStep)=obj.Fz_rl(currentStep)*mul_rl*...
                sin(obj.cl_rl*atan2(obj.bl_rl*...
                obj.slipLongitudinal_rl(currentStep), mul_rl));
            obj.alpha_rl(currentStep)=obj.delta_rl(currentStep)-...
                atan2((obj.speed(currentStep-1)*...
                sin(obj.beta(currentStep-1))-obj.lr/1000*...
                obj.dotPhi(currentStep-1)),...
                (obj.speed(currentStep-1)*cos(obj.beta(currentStep-1))-...
                obj.widthVehicle/2000*obj.dotPhi(currentStep-1)));
            obj.slipSide_rl(currentStep)=tan(obj.alpha_rl(currentStep));
            obj.Fs_rl(currentStep)=obj.Fz_rl(currentStep)*mus_rl*...
                sin(obj.cs_rl*atan2(obj.bs_rl*...
                obj.slipSide_rl(currentStep), mus_rl));
            forceDirection_rl=atan2(obj.slipSide_rl(currentStep),...
                obj.slipLongitudinal_rl(currentStep));
            absolutSlip_rl=sqrt(obj.slipLongitudinal_rl(currentStep)^2+...
                obj.slipSide_rl(currentStep)^2);
            if absolutSlip_rl<1e-3
                absoluteForce_rl=0;
            else
                absoluteForce_rl=sqrt...
                    ((obj.slipLongitudinal_rl(currentStep)/...
                    absolutSlip_rl)^2*obj.Fl_rl(currentStep)^2+...
                    (obj.slipSide_rl(currentStep)/absolutSlip_rl)^2*...
                    obj.Fs_rl(currentStep)^2);
            end
            obj.Fl_rl(currentStep)=absoluteForce_rl*cos(forceDirection_rl);
            obj.Fs_rl(currentStep)=absoluteForce_rl*sin(forceDirection_rl);
            
            %Forces on rear-right tire
            obj.Fl_rr(currentStep)=obj.Fz_rr(currentStep)*mul_rr*...
                sin(obj.cl_rr*atan2(obj.bl_rr*...
                obj.slipLongitudinal_rr(currentStep), mul_rr));
            obj.alpha_rr(currentStep)=obj.delta_rr(currentStep)-...
                atan2((obj.speed(currentStep-1)*...
                sin(obj.beta(currentStep-1))-obj.lr/1000*...
                obj.dotPhi(currentStep-1)),(obj.speed(currentStep-1)*...
                cos(obj.beta(currentStep-1))+obj.widthVehicle/2000*...
                obj.dotPhi(currentStep-1)));
            obj.slipSide_rr(currentStep)=tan(obj.alpha_rr(currentStep));
            obj.Fs_rr(currentStep)=obj.Fz_rr(currentStep)*mus_rr*...
                sin(obj.cs_rr*atan2(obj.bs_rr*...
                obj.slipSide_rr(currentStep), mus_rr));
            forceDirection_rr=atan2(obj.slipSide_rr(currentStep),...
                obj.slipLongitudinal_rr(currentStep));
            absolutSlip_rr=sqrt(obj.slipLongitudinal_rr(currentStep)^2+...
                obj.slipSide_rr(currentStep)^2);
            if absolutSlip_rr<1e-3
                absoluteForce_rr=0;
            else
                absoluteForce_rr=sqrt...
                    ((obj.slipLongitudinal_rr(currentStep)/...
                    absolutSlip_rr)^2*obj.Fl_rr(currentStep)^2+...
                    (obj.slipSide_rr(currentStep)/absolutSlip_rr)^2*...
                    obj.Fs_rr(currentStep)^2);
            end
            obj.Fl_rr(currentStep)=absoluteForce_rr*cos(forceDirection_rr);
            obj.Fs_rr(currentStep)=absoluteForce_rr*sin(forceDirection_rr);
            
            % SOLVING DIFFERENTIAL EQUATION NUMERICALLY
            obj.speed(currentStep) = obj.speed(currentStep-1) +...
                T*(1/obj.vehicleMass)*...
                (obj.Fl_fl(currentStep)*cos(obj.delta_fl(currentStep)-...
                obj.beta(currentStep-1))+...
                obj.Fl_fr(currentStep)*cos(obj.delta_fr(currentStep)-...
                obj.beta(currentStep-1))-...
                obj.Fs_fl(currentStep)*sin(obj.delta_fl(currentStep)-...
                obj.beta(currentStep-1))-...
                obj.Fs_fr(currentStep)*sin(obj.delta_fr(currentStep)-...
                obj.beta(currentStep-1))+...
                obj.Fl_rl(currentStep)*cos(obj.delta_rl(currentStep)-...
                obj.beta(currentStep-1))+...
                obj.Fl_rr(currentStep)*cos(obj.delta_rr(currentStep)-...
                obj.beta(currentStep-1))-...
                obj.Fs_rl(currentStep)*sin(obj.delta_rl(currentStep)-...
                obj.beta(currentStep-1))-...
                obj.Fs_rr(currentStep)*sin(obj.delta_rr(currentStep)-...
                obj.beta(currentStep-1)));
            
            if obj.speed(currentStep)>3/3.6
                
                obj.beta(currentStep)=obj.beta(currentStep-1) +...
                    T*((1/(obj.vehicleMass*obj.speed(currentStep-1)))*...
                    (obj.Fl_fl(currentStep)*...
                    sin(obj.delta_fl(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fl_fr(currentStep)*...
                    sin(obj.delta_fr(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fs_fl(currentStep)*...
                    cos(obj.delta_fl(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fs_fr(currentStep)*...
                    cos(obj.delta_fr(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fl_rl(currentStep)*...
                    sin(obj.delta_rl(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fl_rr(currentStep)*...
                    sin(obj.delta_rr(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fs_rl(currentStep)*...
                    cos(obj.delta_rl(currentStep)-...
                    obj.beta(currentStep-1))+...
                    obj.Fs_rr(currentStep)*...
                    cos(obj.delta_rr(currentStep)-...
                    obj.beta(currentStep-1)))-obj.dotPhi(currentStep-1));
                
                obj.dotPhi(currentStep) = obj.dotPhi(currentStep-1) +...
                    T*((1/obj.Iz)*((obj.lf/1000)*...
                    (obj.Fl_fl(currentStep)*...
                    sin(obj.delta_fl(currentStep))+...
                    obj.Fl_fr(currentStep)*...
                    sin(obj.delta_fr(currentStep))+...
                    obj.Fs_fl(currentStep)*...
                    cos(obj.delta_fl(currentStep))+...
                    obj.Fs_fr(currentStep)*...
                    cos(obj.delta_fr(currentStep)))+...
                    (obj.widthVehicle/2000)*...
                    (obj.Fl_fr(currentStep)*...
                    cos(obj.delta_fr(currentStep))-...
                    obj.Fl_fl(currentStep)*...
                    cos(obj.delta_fl(currentStep))-...
                    obj.Fs_fr(currentStep)*...
                    sin(obj.delta_fr(currentStep))+...
                    obj.Fs_fl(currentStep)*...
                    sin(obj.delta_fl(currentStep)))-...
                    (obj.lr/1000)*(obj.Fl_rl(currentStep)*...
                    sin(obj.delta_rl(currentStep))+...
                    obj.Fl_rr(currentStep)*...
                    sin(obj.delta_rr(currentStep))+...
                    obj.Fs_rl(currentStep)*...
                    cos(obj.delta_rl(currentStep))+...
                    obj.Fs_rr(currentStep)*...
                    cos(obj.delta_rr(currentStep)))+...
                    (obj.widthVehicle/2000)*(obj.Fl_rr(currentStep)*...
                    cos(obj.delta_rr(currentStep))-...
                    obj.Fl_rl(currentStep)*...
                    cos(obj.delta_rl(currentStep))-...
                    obj.Fs_rr(currentStep)*...
                    sin(obj.delta_rr(currentStep))+...
                    obj.Fs_rl(currentStep)*...
                    sin(obj.delta_rl(currentStep)))));
            elseif obj.speed(currentStep) < 0
                obj.beta(currentStep) = 0;
                obj.dotPhi(currentStep) = 0;
                obj.speed(currentStep) =0;
                obj.lateralAccn(currentStep)= 0;
                obj.alpha_fl(currentStep)=0;
                obj.alpha_fr(currentStep)=0;
                obj.alpha_rl(currentStep)=0;
                obj.alpha_rr(currentStep)=0;
                obj.Fs_fl(currentStep)=0;
                obj.Fs_fr(currentStep)=0;
                obj.Fs_rl(currentStep)=0;
                obj.Fs_rr(currentStep)=0;
            else
                obj.beta(currentStep) = 0;
                obj.dotPhi(currentStep) = 0;
                obj.lateralAccn(currentStep)= 0;
                obj.alpha_fl(currentStep)=0;
                obj.alpha_fr(currentStep)=0;
                obj.alpha_rl(currentStep)=0;
                obj.alpha_rr(currentStep)=0;
                obj.Fs_fl(currentStep)=0;
                obj.Fs_fr(currentStep)=0;
                obj.Fs_rl(currentStep)=0;
                obj.Fs_rr(currentStep)=0;
            end
            obj.angleDir(currentStep)=obj.angleDir(currentStep-1)+...
                T*obj.dotPhi(currentStep-1);
            obj.xCG(currentStep)=obj.xCG(currentStep-1) + ...
                T*(obj.speed(currentStep)*cos(obj.beta(currentStep))*...
                cos(obj.angleDir(currentStep))-...
                obj.speed(currentStep)*sin(obj.beta(currentStep))*...
                sin(obj.angleDir(currentStep)));
            obj.yCG(currentStep) = obj.yCG(currentStep-1) + ...
                T*(obj.speed(currentStep)*cos(obj.beta(currentStep))*...
                sin(obj.angleDir(currentStep))+...
                obj.speed(currentStep)*sin(obj.beta(currentStep))*...
                cos(obj.angleDir(currentStep)));
            
            %% vehicle position update
            ex=cos(obj.angleDir(currentStep));
            ey=sin(obj.angleDir(currentStep));
            exOrtho=ex*cos(pi/2)+ey*sin(pi/2);
            eyOrtho=-ex*sin(pi/2)+ey*cos(pi/2);
            scalingUnit =1;
            x_Data = zeros(4,1);
            y_Data = zeros(4,1);
            if vehType == 2
                obj.lfToFront = 1000*vehLength/2;
                obj.lrToRear = 1000*vehLength/2;
                obj.widthVehicle = 1000*vehWidth;
            end
            x_Data(3)=obj.xCG(currentStep)+ex*...
                (((obj.lf)+(obj.lfToFront))/1000*scalingUnit)+...
                ((obj.widthVehicle)/2000*exOrtho/scalingUnit);
            y_Data(3)=obj.yCG(currentStep)+ey*...
                (((obj.lf)+(obj.lfToFront))/1000*scalingUnit)+...
                ((obj.widthVehicle)/2000*eyOrtho/scalingUnit);
            x_Data(4)=obj.xCG(currentStep)+ex*...
                (((obj.lf)+(obj.lfToFront))/1000*scalingUnit)-...
                ((obj.widthVehicle)/2000*exOrtho/scalingUnit);
            y_Data(4)=obj.yCG(currentStep)+ey*...
                (((obj.lf)+(obj.lfToFront))/1000*scalingUnit)-...
                ((obj.widthVehicle)/2000*eyOrtho/scalingUnit);
            x_Data(2)=obj.xCG(currentStep)-ex*...
                (((obj.lr)+(obj.lrToRear))/1000*scalingUnit)+...
                ((obj.widthVehicle)/2000*exOrtho/scalingUnit);
            y_Data(2)=obj.yCG(currentStep)-ey*...
                (((obj.lr)+(obj.lrToRear))/1000*scalingUnit)+...
                ((obj.widthVehicle)/2000*eyOrtho/scalingUnit);
            x_Data(1)=obj.xCG(currentStep)-ex*...
                (((obj.lr)+(obj.lrToRear))/1000*scalingUnit)-...
                ((obj.widthVehicle)/2000*exOrtho/scalingUnit);
            y_Data(1)=obj.yCG(currentStep)-ey*...
                (((obj.lr)+(obj.lrToRear))/1000*scalingUnit)-...
                ((obj.widthVehicle)/2000*eyOrtho/scalingUnit);
            obj.xCoordinates(currentStep,:) = ...
                [x_Data(1) x_Data(2) x_Data(3) x_Data(4) x_Data(1)];
            obj.yCoordinates(currentStep,:) = ...
                [y_Data(1) y_Data(2) y_Data(3) y_Data(4) y_Data(1)];
        end
    end
end





